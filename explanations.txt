Question 1

For given target string, I am creating a dictionary to map each letter in the string to number of occurences for that letter. Then repetitively from start to end of the source string, I am taking a slice from the source string of length equals to target string. I created temporary dictionary for the slice I am currently working on. Temporary dictionary stores the number of occurrences for each letter in the slice. So if the dictionary I created for target string matches with the temporary string the function return true. So after traversing the complete string if none of the dictionaries matches with target dictionary the function returns false. 
Time complexity:  O(nm), where n is the length of the source string and m is the length of the target string


Question 2

For this algorithm I am generating all even length and odd length palindromes. Then I am keeping track of the longest palindrome seen so far.
To generate odd length palindrome I am fixing a centre and then expand in both directions for longer palindromes.
To generate even length palindrome I am fix two centres ( low and high ) and then expand in both directions for longer palindromes.
Time complexity: O(n^2) where n is the length of input string.
Auxiliary Space: O(1)

Question 3

