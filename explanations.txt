Question 1

For given target string, I am creating a dictionary to map each letter in the string to number of occurences for that letter. Then repetitively from start to end of the source string, I am taking a slice from the source string of length equals to target string. I created temporary dictionary for the slice I am currently working on. Temporary dictionary stores the number of occurrences for each letter in the slice. So if the dictionary I created for target string matches with the temporary string the function return true. So after traversing the complete string if none of the dictionaries matches with target dictionary the function returns false. 
Time complexity:  O(nm), where n is the length of the source string and m is the length of the target string
Space Complexity: O(2)


Question 2

For this algorithm I am generating all even length and odd length palindromes. Then I am keeping track of the longest palindrome seen so far.
To generate odd length palindrome I am fixing a centre and then expand in both directions for longer palindromes.
To generate even length palindrome I am fix two centres ( low and high ) and then expand in both directions for longer palindromes.
Time complexity: O(n^2) where n is the length of input string.
Space complexity: O(1)

Question 3

Kruskal’s Algorithm was implemented to calculate Minimum Spanning Tree for a given graph input.

The adjacency list that was passed as input is used to build two lists: one for list of keys and one for edges. Next, edges are sorted in ascending order of weight. 

Step 1: Pick the smallest edge, then Check if it forms a cycle with the spanning tree 
formed so far. If cycle is not formed, include this edge in spanning tree. Else, discard it.  

Step2:. Repeat step#1 until there are (V-1) edges in the spanning tree.

Time complexity: O(ElogV) where V is number of vertices and E is number of edges
Space Complexity: O(1)

Question 4

From the given adjacency matrix I built a Binary Search Tree. Recursion was used to improve efficiency of algorithm. 

LCAHelper is the recursive method. This method checks on edge cases, then calls itself with left node as root and right node as root. Results of recursive calls stored in leftlca and right lca. if leftlca and right lca are not null, function returns root(function parameter, need not be root of the tree) otherwise returns non-null value among leftlca, rightlca

Time complexity: O(n) where n is the number of nodes
Space complexity: O(1)

Question 5

Maintained two pointers – temp pointer and current pointer. Initialized both pointers to head. Start incrementing the current pointer until it reaches end. When the current pointer crosses mth element from the start, start incrementing temp pointer. At the end, current pointer will be referencing the end element and temp pointer will be pointing the mth element from the end. Return temp pointer.

Time complexity: O(n) where n is the number of nodes
Space complexity: O(1)
